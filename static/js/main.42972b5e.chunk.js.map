{"version":3,"sources":["components/Profile/Profile.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Profile","props","data","name","email","location","dob","picture","className","src","large","alt","title","first","last","date","age","city","country","JSON","stringify","street","coordinates","console","log","App","useState","user","setUser","changeUser","setChangeUser","useEffect","fetch","then","res","json","catch","err","onClick","results","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPA6BeA,EA1BC,SAACC,GAEf,MAA8CA,EAAMC,KAA7CC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,SAAUC,EAA9B,EAA8BA,IAAKC,EAAnC,EAAmCA,QACnC,OACE,sBAAKC,UAAU,UAAf,UACE,qBAAKC,IAAKF,EAAQG,MAAOC,IAAI,gBAAgBH,UAAU,eACvD,0BAASA,UAAU,UAAnB,UACE,wCAAWL,EAAKS,MAAhB,IAAwBT,EAAKU,MAA7B,IAAqCV,EAAKW,QAC1C,uCAAUR,EAAIS,QACd,uCAAUT,EAAIU,OACd,0CAAaZ,KACb,6CAAgBC,EAASY,KAAzB,KAAiCZ,EAASa,WAC1C,2CAAcC,KAAKC,UAAUf,EAASgB,WACtC,+CAAkBF,KAAKC,UAAUf,EAASiB,mBAM3CC,QAAQC,IAAI,YCmBJC,EAnCH,WAaV,MAAyBC,mBAAS,MAAlC,mBAAQC,EAAR,KAAcC,EAAd,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KASA,OAPAC,qBAAU,WACRC,MAAM,8BACHC,MAAM,SAAAC,GAAG,OAAGA,EAAIC,UAChBF,MAAK,SAAA/B,GAAI,OAAI0B,EAAQ1B,MACrBkC,OAAM,SAAAC,GAAG,OAAId,QAAQC,IAAIa,QAC3B,CAACR,IAGF,mCAEA,sBAAKrB,UAAU,MAAf,UACE,wBAAQ8B,QAAS,kBAAMR,GAAeD,IAAtC,yBAECF,GAAQ,cAAC,EAAD,CAASzB,KAAMyB,EAAKY,QAAQ,WCvB5BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.42972b5e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Profile.scss'\r\n\r\nconst Profile = (props) => {\r\n  // const { data } = props;\r\n  const {name, email, location, dob, picture} = props.data\r\n  return (\r\n    <div className=\"profile\">\r\n      <img src={picture.large} alt=\"Large Picture\" className=\"profilePic\"/>\r\n      <section className=\"bioData\">\r\n        <h1>Name: {name.title} {name.first} {name.last}</h1>\r\n        <h1>DOB: {dob.date}</h1>\r\n        <h1>Age: {dob.age}</h1>\r\n        <h1>Email : {email}</h1>\r\n        <h1>Location : {location.city}, {location.country}</h1>\r\n        <h1>Street : {JSON.stringify(location.street)}</h1>\r\n        <h1>Coordinates: {JSON.stringify(location.coordinates)}</h1>      \r\n      </section>\r\n      {/* <img src={picture.medium} alt=\"Medium Picture\" />\r\n      <img src={picture.thumbnail} alt=\"Thumbnail Picture\" /> */}\r\n      {/* <h1>Coordinates: {location.coordinates.latitude} {location.coordinates.longitude}</h1> */}\r\n      \r\n      {console.log(\"stop\")}\r\n      {/* <h1>{JSON.parse(location.street)}</h1> */}\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile\r\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\n// hook : built in functionality that allows us to hook into \"react\" futures.\n//useEffect allows us to hook into the component lifecycle like  component loading, loaded and unloaded.\nimport Profile from './components/Profile/Profile';\n\nconst App = () => {\n  // const [isTrue, setIsTrue] = useState(false); \n\n  // This useEffect will only run once ( when the components first mounts/loads)\n  // useEffect(() => {\n  //   console.log(\"loads only once\");\n  // }, []);\n\n  // will run when the page loads and whenever 'isTrue' changes\n  // useEffect(() => {\n  //   console.log(\"loads whenever isTrue changes\");\n  // }, [isTrue]);\n\n  const [ user, setUser] = useState(null);\n  const [changeUser, setChangeUser] = useState(true);\n\n  useEffect(() =>{\n    fetch('https://randomuser.me/api/')\n      .then( res=> res.json())\n      .then(data => setUser(data))\n      .catch(err => console.log(err))\n  }, [changeUser]);\n\n  return (\n    <>\n    {/* <button onClick={() => setIsTrue(!isTrue)}>Click Me</button> */}\n    <div className=\"app\">\n      <button onClick={() => setChangeUser(!changeUser)}>Get Profile</button>\n      {/* {user && <h1>{user.results[0].name.first}</h1>}     */}\n      {user && <Profile data={user.results[0]} />}\n    </div>\n    </>\n  )\n}\n\nexport default App\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}